@inject HttpClient Http
@inject MediaQueryListener mql
@using TestComponents
@using BlazorPro.BlazorSize.MediaQuery
@page "/fetchdata"


<h1>Weather forecast</h1>

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

@if (smallMedia.Matches)
{
    <WeatherCards Data="forecasts"></WeatherCards>
}
else
{
    <WeatherGrid Data="forecasts"></WeatherGrid>
}

@smallMedia.Media
@smallMedia.Matches
@Message 

@code {
    WeatherForecast[] forecasts;
    MediaQueryListItem smallMedia = new MediaQueryListItem(Breakpoints.SmallDown);
    MediaQueryListItem largeMedia = new MediaQueryListItem(Breakpoints.LargeUp);
    string Message = "";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            mql.OnMediaQueryListChanged += MediaQueryChanged;
            smallMedia = await mql.SubscribeMediaQuery(smallMedia);
            largeMedia = await mql.SubscribeMediaQuery(largeMedia);
            largeMedia.OnChange = OnLargeMediaQueryChanged;
            StateHasChanged();
        }
    }

    void MediaQueryChanged(object _, MediaQueryListItem item)
    {
        var a = new[] { smallMedia, largeMedia };
        a.Update(item);
        StateHasChanged();
    }

    void OnLargeMediaQueryChanged(MediaQueryListItem item)
    {
        Message = "Large got triggered";
    }

}


