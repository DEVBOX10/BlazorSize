@inject IJSRuntime js
@inject HttpClient Http
@implements IDisposable
@using TestComponents
@page "/fetchdata"

<h1>Weather forecast</h1>

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

@if (IsSmallMedia)
{
    <WeatherCards Data="forecasts"></WeatherCards>
}
else
{
    <WeatherGrid Data="forecasts"></WeatherGrid>
}

@code {
    MediaQueryList mq;
    WeatherForecast[] forecasts;

    bool IsSmallMedia = false;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            mq = new MediaQueryList(js);
            var small = await mq.Add(Breakpoints.SmallDown, SmallMediaChanged);
            IsSmallMedia = small.Matches;
        }
    }

    void SmallMediaChanged(MediaQueryArgs args)
    {
        IsSmallMedia = args.Matches;
        StateHasChanged();
    }

    public async void Dispose()
    {
        await mq.DisposeAsync();
    }

}


