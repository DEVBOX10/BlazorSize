@implements IDisposable
@inject MediaQueryListener Mql
@inject HttpClient Http
@using TestComponents
@using BlazorPro.BlazorSize
@page "/fetchdata"


<h1>Weather forecast</h1>

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

@if (smallMedia.Matches)
{
    <WeatherCards Data="forecasts"></WeatherCards>
}
else
{
    <WeatherGrid Data="forecasts"></WeatherGrid>
}

@smallMedia.Media
@smallMedia.Matches
@Message 

@code {
    WeatherForecast[] forecasts;
    MediaQuery smallMedia = new MediaQuery(Breakpoints.SmallDown);
    MediaQuery largeMedia = new MediaQuery(Breakpoints.LargeUp);
    string Message = "";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            Mql.OnMediaQueryListChanged += MediaQueryChanged;
            smallMedia = await Mql.SubscribeMediaQuery(smallMedia);
            largeMedia = await Mql.SubscribeMediaQuery(largeMedia);
            largeMedia.OnChange = OnLargeMediaQueryChanged;
            StateHasChanged();
        }
    }

    void MediaQueryChanged(object _, MediaQueryEventArgs item)
    {
        var subs = new[] { smallMedia, largeMedia };
        subs.ApplyChanges(item);
        StateHasChanged();
    }

    void OnLargeMediaQueryChanged(MediaQueryEventArgs item)
    {
        Message = "Large got triggered";
    }

    void IDisposable.Dispose()
    {
        Mql.OnMediaQueryListChanged -= MediaQueryChanged;
    }

}


