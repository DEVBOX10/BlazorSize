@inject HttpClient Http
@inject IJSRuntime js
@using TestComponents
@using BlazorPro.BlazorSize.MediaQuery
@page "/fetchdata"


<h1>Weather forecast</h1>

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

@if (IsMqlSmallMedia)
{
    <WeatherCards Data="forecasts"></WeatherCards>
}
else
{
    <WeatherGrid Data="forecasts"></WeatherGrid>
}

<ul class="list-group">
    <li class="list-group-item @(IsMqlSmallMedia ? "active": "")">Phone Size</li>
    <li class="list-group-item @(IsMqlMediumMedia ? "active": "")">Tablet Size</li>
    <li class="list-group-item @(IsMqlLargeMedia? "active": "")">Desktop Size</li>
</ul>

<ul>
    @foreach (var item in initialState)
    {
    <li>
        @item.Key
        <span>:</span>
        @Breakpoints.OnlyMedium <span>=</span> @(item.Key == Breakpoints.OnlyMedium)
    </li>
    }

</ul>
@code {
    WeatherForecast[] forecasts;

    MediaQueryList mql;

    bool IsMqlSmallMedia;
    bool IsMqlMediumMedia;
    bool IsMqlLargeMedia;


    Dictionary<string, bool> initialState = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            mql = new MediaQueryList(js);
            await mql.AddMediaQueryListener(Breakpoints.OnlyMedium, HandleMedium);
            await mql.AddMediaQueryListener(Breakpoints.SmallDown, HandleSmallDown);
            await mql.AddMediaQueryListener(Breakpoints.LargeUp, HandleLarge);
            initialState = await mql.GetState();

            //IsMqlSmallMedia = initialState[Breakpoints.SmallDown];
            //IsMqlMediumMedia = initialState[Breakpoints.OnlyMedium];
            //IsMqlLargeMedia = initialState[Breakpoints.LargeUp];
            StateHasChanged();
        }
    }

}


