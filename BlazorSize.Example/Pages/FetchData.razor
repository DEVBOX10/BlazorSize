@inject ResizeListener listener
@implements IDisposable
@page "/fetchdata"

@using BlazorSize.Example.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

@if (IsSmallMedia)
{
    <WeatherGrid Data="forecasts"></WeatherGrid>
}
else
{
    <WeatherCards Data="forecasts"></WeatherCards>
}

@code {
    WeatherForecast[] forecasts;

    BrowserWindowSize browser = new BrowserWindowSize();

    bool IsSmallMedia = false;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            listener.OnResized += WindowResized;
        }
    }


    async void WindowResized(object _, BrowserWindowSize window)
    {
        browser = window;
        IsSmallMedia = await listener.MatchMedia("(min-width: 768px)");
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        listener.OnResized -= WindowResized;
    }

}
